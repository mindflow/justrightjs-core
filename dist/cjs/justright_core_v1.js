"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var coreutil_v1=require("coreutil_v1"),xmlparser_v1=require("xmlparser_v1"),mindi_v1=require("mindi_v1");const LOG=new coreutil_v1.Logger("ContainerBridge");class ContainerBridge{static getElementById(t){return document.getElementById(t)}static createTextNode(t){return document.createTextNode(t)}static createElement(t){return document.createElement(t)}static createElementNS(t,e){return document.createElementNS(t,e)}static fetch(t,e){return window.fetch(t,e)}static setSessionAttribute(t,e){window.sessionStorage.setItem(t,e)}static removeSessionAttribute(t){window.sessionStorage.removeItem(t)}static getSessionAttribute(t){return window.sessionStorage.getItem(t)}static hasSessionAttribute(t){return null!==window.sessionStorage.getItem(t)}static setLocalAttribute(t,e){window.localStorage.setItem(t,e)}static removeLocalAttribute(t){window.localStorage.removeItem(t)}static hasLocalAttribute(t){return null!==window.localStorage.getItem(t)}static getLocalAttribute(t){return window.localStorage.getItem(t)}static removeElement(t){let e=document.getElementById(t);e.parentNode.removeChild(e)}static addHeaderElement(t){document.getElementsByTagName("head")[0].append(t)}static addBodyElement(t){document.getElementsByTagName("body")[0].append(t)}}class Attribute{constructor(t){this.attribute=t}getValue(){return this.attribute.value}getName(){return this.attribute.name}getNamespace(){return this.attribute.name}}const LOG$1=new coreutil_v1.Logger("BaseElement");class BaseElement{constructor(t,e){return this.element=null,this.attributeMap=null,this.eventsAttached=new coreutil_v1.List,t instanceof xmlparser_v1.XmlElement?void(this.element=this.createFromXmlElement(t,e)):"string"==typeof t?void(this.element=ContainerBridge.createElement(t)):t instanceof HTMLElement?void(this.element=t):(LOG$1.error("Unrecognized value for Element"),void LOG$1.error(t))}loadAttributes(){if(null===this.element.attributes||void 0===this.element.attributes)return void(this.attributeMap=new coreutil_v1.Map);if(null===this.attributeMap||void 0===this.attributeMap){this.attributeMap=new coreutil_v1.Map;for(var t=0;t<this.element.attributes.length;t++)this.attributeMap.set(this.element.attributes[t].name,new Attribute(this.element.attributes[t]))}}createFromXmlElement(t,e){let n=null;return n=t.getNamespace()?ContainerBridge.createElementNS(t.getNamespaceUri(),t.getFullName()):ContainerBridge.createElement(t.getName()),e&&null!==e.getMappedElement()&&e.getMappedElement().appendChild(n),t.getAttributes().forEach(function(t,e){return n.setAttribute(t,e.getValue()),!0}),n}attachEvent(t,e){this.eventsAttached.contains(t)?LOG$1.warn("Event '"+t+"' allready attached for "+this.element.name):(t.startsWith("on")&&(t=t.substr(2)),this.element.addEventListener(t,e),this.eventsAttached.add(t))}getMappedElement(){return this.element}getFullName(){return this.element.tagName}getTop(){return this.element.getBoundingClientRect().top}getBottom(){return this.element.getBoundingClientRect().bottom}getLeft(){return this.element.getBoundingClientRect().left}getRight(){return this.element.getBoundingClientRect().right}getWidth(){return this.element.offsetWidth}getHeight(){return this.element.offsetHeight}getAttributes(){return this.loadAttributes(),this.attributeMap}setAttributeValue(t,e){this.element.setAttribute(t,e)}getAttributeValue(t){return this.element.getAttribute(t)}containsAttribute(t){return this.element.hasAttribute(t)}removeAttribute(t){this.element.removeAttribute(t)}setStyle(t,e){this.element.style[t]=e}getStyle(t){return this.element.style[t]}removeStyle(t){this.element.style[t]=null}set(t){return null===this.element.parentNode?void console.error("The element has no parent, can not swap it for value"):t.getMappedElement?void this.element.parentNode.replaceChild(t.getMappedElement(),this.element):t&&"function"==typeof t.getRootElement?(this.element.parentNode.replaceChild(t.getRootElement().getMappedElement(),this.element),void(this.element=t.getRootElement().getMappedElement())):"string"==typeof t?void this.element.parentNode.replaceChild(ContainerBridge.createTextNode(t),this.element):t instanceof Text?void this.element.parentNode.replaceChild(t,this.element):t instanceof Element?void this.element.parentNode.replaceChild(t,this.element):void 0}isMounted(){return!!this.element.parentNode}remove(){this.element.parentNode.removeChild(this.element)}clear(){for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild)}setChild(t){this.clear(),this.addChild(t)}addChild(t){return t.getMappedElement?void this.element.appendChild(t.getMappedElement()):t&&"function"==typeof t.getRootElement?void this.element.appendChild(t.getRootElement().getMappedElement()):"string"==typeof t?void this.element.appendChild(ContainerBridge.createTextNode(t)):t instanceof Text?void this.element.appendChild(t):t instanceof Element?void this.element.appendChild(t):void 0}prependChild(t){return null===this.element.firstChild&&this.addChild(t),t.getMappedElement?void this.element.insertBefore(t.getMappedElement(),this.element.firstChild):t&&"function"==typeof t.getRootElement?void this.element.insertBefore(t.getRootElement().getMappedElement(),this.element.firstChild):"string"==typeof t?void this.element.insertBefore(ContainerBridge.createTextNode(t),this.element.firstChild):t instanceof Text?void this.element.insertBefore(t,this.element.firstChild):t instanceof Element?void this.element.insertBefore(t,this.element.firstChild):void 0}}class CanvasRoot{static replaceComponent(t,e){var n=ContainerBridge.getElementById(t);n.parentNode.replaceChild(e.getRootElement().getMappedElement(),n)}static setComponent(t,e){var n=ContainerBridge.getElementById(t);n.innerHTML="",n.appendChild(e.getRootElement().getMappedElement(),n)}static addChildComponent(t,e){ContainerBridge.getElementById(t).appendChild(e.getRootElement().getMappedElement())}static addChildElement(t,e){ContainerBridge.getElementById(t).appendChild(e.getMappedElement())}static removeElement(t){ContainerBridge.removeElement(t)}static addHeaderElement(t){ContainerBridge.addHeaderElement(t.getMappedElement())}static addBodyElement(t){ContainerBridge.addBodyElement(t.getMappedElement())}}const LOG$2=new coreutil_v1.Logger("AbstractInputElement");class AbstractInputElement extends BaseElement{constructor(t,e){super(t,e)}getName(){return this.element.name}setName(t){this.element.name=t}getValue(){return this.getBackingValue()}getBackingValue(){return this.element.value}setValue(t){this.element.value=t}focus(){this.element.focus()}selectAll(){this.element.select()}enable(){this.element.disabled=!1}disable(){this.element.disabled=!0}}class RadioInputElement extends AbstractInputElement{constructor(t,e){super(t,e)}setChecked(t){this.element.checked=t}isChecked(){return this.element.checked}getValue(){return this.isChecked()?super.getValue():null}}class CheckboxInputElement extends AbstractInputElement{constructor(t,e){super(t,e)}setChecked(t){this.element.checked=t}isChecked(){return this.element.checked}getValue(){return this.isChecked()?super.getValue():null}}class TextInputElement extends AbstractInputElement{constructor(t,e){super(t,e)}}class TextareaInputElement extends AbstractInputElement{constructor(t,e){super(t,e)}getInnerHTML(){return this.element.innerHTML}setInnerHTML(t){this.element.innerHTML=t}addChild(t){super.addChild(t),this.setValue(this.getInnerHTML())}prependChild(t){super.prependChild(t),this.setValue(this.getInnerHTML())}}class TextnodeElement{constructor(t,e){t instanceof xmlparser_v1.XmlCdata&&(this.element=this.createFromXmlCdata(t,e)),"string"==typeof t&&(this.element=ContainerBridge.createTextNode(t))}createFromXmlCdata(t,e){let n=document.createTextNode(t.getValue());return null!==e&&null!==e.getMappedElement()&&e.getMappedElement().appendChild(n),n}setValue(t){this.element=t}getValue(){return this.element}getMappedElement(){return this.element}}class SimpleElement extends BaseElement{constructor(t,e){super(t,e)}getInnerHTML(){return this.element.innerHTML}setInnerHTML(t){this.element.innerHTML=t}}class ElementMapper{static map(t,e){return ElementMapper.mapsToRadio(t)?new RadioInputElement(t,e):ElementMapper.mapsToCheckbox(t)?new CheckboxInputElement(t,e):ElementMapper.mapsToSubmit(t)?new TextInputElement(t,e):ElementMapper.mapsToTextarea(t)?new TextareaInputElement(t,e):ElementMapper.mapsToText(t)?new TextInputElement(t,e):ElementMapper.mapsToTextnode(t)?new TextnodeElement(t,e):ElementMapper.mapsToSimple(t)?new SimpleElement(t,e):(console.log("Mapping to simple by default "+t),new SimpleElement(t,e))}static mapsToRadio(t){return t instanceof HTMLInputElement&&"radio"===t.type||t instanceof xmlparser_v1.XmlElement&&"input"===t.getName()&&"radio"===t.getAttribute("type").getValue()}static mapsToCheckbox(t){return t instanceof HTMLInputElement&&"checkbox"===t.type||t instanceof xmlparser_v1.XmlElement&&"input"===t.getName()&&"checkbox"===t.getAttribute("type").getValue()}static mapsToSubmit(t){return t instanceof HTMLInputElement&&"submit"===t.type||t instanceof xmlparser_v1.XmlElement&&"input"===t.getName()&&"submit"===t.getAttribute("type").getValue()}static mapsToText(t){if(t instanceof HTMLInputElement){if("text"===t.type)return!0;if("password"===t.type)return!0;if("email"===t.type)return!0;if("date"===t.type)return!0;if("time"===t.type)return!0}if(t instanceof xmlparser_v1.XmlElement&&"input"===t.getName()){if("text"===t.getAttribute("type").getValue())return!0;if("password"===t.getAttribute("type").getValue())return!0;if("email"===t.getAttribute("type").getValue())return!0;if("date"===t.getAttribute("type").getValue())return!0;if("time"===t.getAttribute("type").getValue())return!0}return!1}static mapsToTextnode(t){return t instanceof Node&&"TEXT_NODE"===t.nodeType||t instanceof xmlparser_v1.XmlCdata}static mapsToTextarea(t){return t instanceof HTMLTextAreaElement||t instanceof xmlparser_v1.XmlElement&&"textarea"===t.getName()}static mapsToSimple(t){return t instanceof HTMLElement||t instanceof xmlparser_v1.XmlElement}}class HTML{static custom(t){var e=new xmlparser_v1.XmlElement(t);return ElementMapper.map(e)}static applyStyles(t,e,n){null!==e&&t.setAttributeValue("class",e),null!==n&&t.setAttributeValue("style",n)}static a(t,e,n,i){var r=HTML.custom("a");return r.addChild(t),r.setAttributeValue("href",e),HTML.applyStyles(r,n,i),r}}const LOG$3=new coreutil_v1.Logger("CanvasStyles"),styles=new coreutil_v1.Map,enabledStyles=new coreutil_v1.List;class CanvasStyles{static setStyle(t,e){if(styles.contains(t))styles.get(t).setChild(new TextnodeElement(e.getStylesSource()));else{let n=HTML.custom("style");n.setAttributeValue("id",t),n.setChild(new TextnodeElement(e.getStylesSource())),styles.set(t,n)}}static removeStyle(t){enabledStyles.contains(t)&&CanvasStyles.disableStyle(t),styles.remove(t)}static disableStyle(t){if(!styles.contains(t))return void LOG$3.error("Style does not exist: "+t);enabledStyles.contains(t)&&(enabledStyles.remove(t),CanvasRoot.removeElement(t))}static enableStyle(t){if(!styles.contains(t))return void LOG$3.error("Style does not exist: "+t);enabledStyles.contains(t)||(enabledStyles.add(t),CanvasRoot.addHeaderElement(styles.get(t)))}}class Client{static get(t){var e={method:"GET",mode:"cors",redirect:"follow"};return ContainerBridge.fetch(t.toString(),e)}static post(t,e){var n={body:JSON.stringify(e),headers:{"user-agent":"Mozilla/4.0 MDN Example","content-type":"application/json"},method:"POST",mode:"cors",redirect:"follow"};return ContainerBridge.fetch(t.toString(),n)}static put(t,e){var n={body:JSON.stringify(e),method:"PUT",mode:"cors",redirect:"follow",headers:{"user-agent":"Mozilla/4.0 MDN Example","content-type":"application/json"}};return ContainerBridge.fetch(t.toString(),n)}static patch(t,e){var n={body:JSON.stringify(e),method:"PATCH",mode:"cors",redirect:"follow",headers:{"user-agent":"Mozilla/4.0 MDN Example","content-type":"application/json"}};return ContainerBridge.fetch(t.toString(),n)}static delete(t){var e={method:"DELETE",mode:"cors",redirect:"follow"};return ContainerBridge.fetch(t.toString(),e)}}class Component{constructor(t,e,n){this.componentIndex=t,this.elementMap=n,this.rootElement=e}remove(){this.rootElement.remove()}getRootElement(){return this.rootElement}getComponentIndex(){return this.componentIndex}get(t){return this.elementMap.get(t)}set(t,e){this.elementMap.get(t).set(e)}clearChildren(t){this.elementMap.get(t).clear()}setChild(t,e){this.elementMap.get(t).setChild(e)}addChild(t,e){this.elementMap.get(t).addChild(e)}prependChild(t,e){this.elementMap.get(t).prependChild(e)}}class Url{constructor(t){if(this.protocol=null,this.host=null,this.port=null,this.pathList=new coreutil_v1.List,this.parameterMap=new coreutil_v1.Map,this.bookmark=null,null!==t){var e=this.determineProtocol(t);null!==e&&(null!==this.protocol&&(e=this.determineHost(e)),null!==e&&(null!==this.host&&(e=this.determinePort(e)),null!==e&&null!==(e=this.determinePath(e))&&null!==(e=this.determineParameters(e))&&this.determineBookmark(e)))}}getProtocol(){return this.protocol}getHost(){return this.host}getPort(){return this.port}getPathList(){return this.pathList}getPath(t){return this.pathList.get(t)}clearPathList(){this.pathList=new coreutil_v1.List}getParameterMap(){return this.parameterMap}clearParameterMAp(){this.parameterMap=new coreutil_v1.Map}getParameter(t){return this.parameterMap.get(t)}setParameter(t,e){this.parameterMap.set(t,e)}setBookmark(t){this.bookmark=t}setPath(t){this.determinePath(t)}setQueryString(t){this.parameterMap=this.determineParameters(t)}getBookmark(){return this.bookmark}determineProtocol(t){if(-1===t.indexOf("//"))return t;var e=t.split("//");return-1!==e[0].indexOf("/")?t:(this.protocol=e[0],1==e.length?null:t.replace(e[0]+"//",""))}determineHost(t){var e=t.split("/"),n=e[0];return-1!==n.indexOf(":")&&(n=n.split(":")[0]),this.host=n,e.length>1?t.replace(n,""):null}determinePort(t){if(!t.startsWith(":"))return t;var e=t.split("/")[0].substring(1);return this.port=e,t.replace(":"+e,"")}determinePath(t){var e=t;if(-1!==t.indexOf("?"))(n=t.split("?")).length>1&&(e=t.substring(t.indexOf("?"))),t=n[0];else if(-1!==t.indexOf("#")){var n=t.split("#");n.length>1&&(e=t.substring(t.indexOf("#"))),t=n[0]}t.startsWith("/")&&(t=t.substring(1));var i=new coreutil_v1.List(t.split("/"));return this.pathList=new coreutil_v1.List,i.forEach(function(t,e){return e.pathList.add(decodeURI(t)),!0},this),e}determineParameters(t){var e=t;if(-1===t.indexOf("?"))return t;-1!==(t=t.substring(t.indexOf("?")+1)).indexOf("#")&&(e=t.substring(t.indexOf("#")),t=t.substring(0,t.indexOf("#")));var n=new coreutil_v1.List(t.split("&")),i=new coreutil_v1.Map;return n.forEach(function(t,e){var n=t.split("=");return n.length>=2&&i.set(decodeURI(n[0]),decodeURI(n[1])),!0},this),this.parameterMap=i,e}determineBookmark(t){-1!==t.indexOf("#")&&(this.bookmark=t.substring(t.indexOf("#")+1))}toString(){var t="";null!==this.protocol&&(t=t+this.protocol+"//"),null!==this.host&&(t+=this.host),null!==this.port&&(t=t+":"+this.port),this.pathList.forEach(function(e,n){return t=t+"/"+e,!0},this);var e=!0;return this.parameterMap.forEach(function(n,i,r){e?(e=!1,t+="?"):t+="&",t=t+encodeURI(n)+"="+encodeURI(i)},this),null!==this.bookmark&&(t=t+"#"+this.bookmark),t}}class Styles{constructor(t){this.stylesSource=t}getStylesSource(){return this.stylesSource}}const LOG$4=new coreutil_v1.Logger("StylesRegistry");class StylesRegistry{constructor(){this.stylesMap=new coreutil_v1.Map,this.stylesUrlMap=new coreutil_v1.Map,this.stylesQueueSize=0,this.callback=null}set(t,e,n){void 0!==n&&null!==n&&this.stylesUrlMap.set(t,n),this.stylesMap.set(t,e)}get(t){return this.stylesMap.get(t)}contains(t){return this.stylesMap.contains(t)}done(t){this.callback=t,this.doCallback(this)}doCallback(t){if(null!==tmo.callback&&void 0!==t.callback&&t.stylesQueueSize===t.stylesMap.size()){var e=t.callback;t.callback=null,e.call()}}load(t,e){return this.stylesQueueSize++,new Promise(n=>{Client.get(e).then(i=>{if(!i.ok)throw"Unable to load styles for "+t+" at "+e;i.text().then(i=>{this.set(t,new Styles(i),e);this.doCallback(this);n()})})})}getStylesLoadedPromise(t){return new Promise((e,n)=>{var i=0;if(!t||0==t.size())return void e();t.forEach((r,o,s)=>{if(this.contains(r))return++i!=t.size()||(e(),!1);this.privateLoad(r,new Url(o)).then(()=>{i++;if(i==t.size())return e(),!1}).catch(t=>{n(t);return!1});return!0},this)})}privateLoad(t,e){return LOG$4.info("Loading styles "+t+" at "+e.toString()),new Promise(n=>{Client.get(e).then(i=>{if(!i.ok)throw"Unable to load styles for "+t+" at "+e;i.text().then(i=>{this.set(t,new Styles(i),e);n()})})})}}class Template{constructor(t){this.templateSource=t}getTemplateSource(){return this.templateSource}}const LOG$5=new coreutil_v1.Logger("TemplateRegistry");class TemplateRegistry{constructor(){this.templateMap=new coreutil_v1.Map,this.templateUrlMap=new coreutil_v1.Map,this.templateQueueSize=0,this.callback=null,this.languagePrefix=null}setLanguagePrefix(t){this.languagePrefix=t}set(t,e,n){void 0!==n&&null!==n&&this.templateUrlMap.set(t,n),this.templateMap.set(t,e)}get(t){return this.templateMap.get(t)}contains(t){return this.templateMap.contains(t)}done(t){this.callback=t,this.doCallback(this)}doCallback(t){if(null!==tmo.callback&&void 0!==t.callback&&t.templateQueueSize===t.templateMap.size()){var e=t.callback;t.callback=null,e.call()}}load(t,e){return null!==this.languagePrefix&&e.getPathList().setLast(this.languagePrefix+"."+e.getPathList().getLast()),this.templateQueueSize++,new Promise(n=>{Client.get(e).then(i=>{if(!i.ok)throw"Unable to load template for "+t+" at "+e;i.text().then(i=>{this.set(t,new Template(i),e);this.doCallback(this);n()})})})}getTemplatesLoadedPromise(t){return new Promise((e,n)=>{var i=0;if(!t||0==t.size())return void e();t.forEach((r,o,s)=>{if(this.contains(r))return++i!=t.size()||(e(),!1);this.privateLoad(r,new Url(o)).then(()=>{i++;if(i==t.size())return e(),!1}).catch(t=>{n(t);return!1});return!0},this)})}privateLoad(t,e){return null!==this.languagePrefix&&e.getPathList().setLast(this.languagePrefix+"."+e.getPathList().getLast()),LOG$5.info("Loading template "+t+" at "+e.toString()),new Promise(n=>{Client.get(e).then(i=>{if(!i.ok)throw"Unable to load template for "+t+" at "+e;i.text().then(i=>{this.set(t,new Template(i),e);n()})})})}}const LOG$6=new coreutil_v1.Logger("TemplatePostConfig");class TemplatesLoader{constructor(t){this.templateRegistry=t}load(t){let e=new coreutil_v1.Map;return t.getConfigEntries().forEach((t,n,i)=>{n.getClassReference().TEMPLATE_URL&&n.getClassReference().COMPONENT_NAME&&e.set(n.getClassReference().COMPONENT_NAME,n.getClassReference().TEMPLATE_URL);return!0},this),this.templateRegistry.getTemplatesLoadedPromise(e)}}const LOG$7=new coreutil_v1.Logger("StylesLoader");class StylesLoader{constructor(t){this.stylesRegistry=t}load(t){let e=new coreutil_v1.Map;return t.getConfigEntries().forEach((t,n,i)=>{n.getClassReference().STYLES_URL&&n.getClassReference().COMPONENT_NAME&&e.set(n.getClassReference().COMPONENT_NAME,n.getClassReference().STYLES_URL);return!0},this),this.stylesRegistry.getStylesLoadedPromise(e)}}const LOG$8=new coreutil_v1.Logger("ComponentConfigProcessor");class ComponentConfigProcessor{constructor(){this.templateRegistry=mindi_v1.InjectionPoint.instance(TemplateRegistry),this.stylesRegistry=mindi_v1.InjectionPoint.instance(StylesRegistry)}postConfig(){this.templatesLoader=new TemplatesLoader(this.templateRegistry),this.stylesLoader=new StylesLoader(this.stylesRegistry)}processConfig(t){return Promise.all([this.templatesLoader.load(t),this.stylesLoader.load(t)])}}const LOG$9=new coreutil_v1.Logger("ComponentCreatorInstanceProcessor");class ComponentCreatorInstanceProcessor{constructor(){LOG$9.info("Creating")}process(t){t.createComponent&&t.createComponent()}}class UniqueIdRegistry{idAttributeWithSuffix(t){if(idNames.contains(t)){var e=idNames.get(t);return idNames.set(t,e+1),t+"-"+e}return idNames.set(t,1),t}}var idNames=new coreutil_v1.Map;class Event{constructor(t){this.event=t,"dragstart"==this.event.type.toLowerCase()&&this.event.dataTransfer.setData("text/plain",null)}preventDefault(){this.event.preventDefault()}getOffsetX(){return this.event.offsetX}getOffsetY(){return this.event.offsetY}getClientX(){return this.event.clientX}getClientY(){return this.event.clientY}getTarget(){return ElementMapper.map(this.event.target)}getKeyCode(){return this.event.keyCode}}const LOG$a=new coreutil_v1.Logger("EventRegistry");class EventRegistry{constructor(){this.listeners=new coreutil_v1.Map,this.beforeListeners=new coreutil_v1.Map,this.afterListeners=new coreutil_v1.Map}attach(t,e,n,i){const r=n+"_"+i,o=this;t.attachEvent(e,function(t){o.trigger(r,n,t)})}listen(t,e,n){const i=t+"_"+n;this.listeners.exists(i)||this.listeners.set(i,new coreutil_v1.List),this.listeners.get(i).add(e)}listenBefore(t,e,n){this.beforeListeners.exists(t)||this.beforeListeners.set(t,new coreutil_v1.List),this.beforeListeners.get(t).add(new coreutil_v1.ObjectFunction(e,n))}listenAfter(t,e,n){this.afterListeners.exists(t)||this.afterListeners.set(t,new coreutil_v1.List),this.afterListeners.get(t).add(new coreutil_v1.ObjectFunction(e,n))}trigger(t,e,n){this.handleBefore(e,n),this.listeners.exists(t)&&this.listeners.get(t).forEach((t,e)=>{t.call(new Event(n));return!0},this),this.handleAfter(e,n)}handleBefore(t,e){this.handleGlobal(this.beforeListeners,t,e)}handleAfter(t,e){this.handleGlobal(this.afterListeners,t,e)}handleGlobal(t,e,n){t.exists(e)&&t.get(e).forEach((t,e)=>{t.call(new Event(n));return!0},this)}}class ElementRegistrator{constructor(t,e,n){this.componentIndex=n,this.uniqueIdRegistry=e,this.eventRegistry=t,this.rootElement=null,this.elementMap=new coreutil_v1.Map}getRootElement(){return this.rootElement}getElementMap(){return this.elementMap}getComponentIndex(){return this.componentIndex}elementCreated(t,e){var n=ElementMapper.map(t,e);return this.addToElementIdMap(n),this.registerElementEvents(n),null===this.rootElement&&null!==n&&(this.rootElement=n),n}registerElementEvents(t){if(null!==t&&void 0!==t&&t instanceof BaseElement){var e=this.eventRegistry,n=this.componentIndex;t.getAttributes().forEach(function(i,r,o){if(null!==r&&void 0!==r&&r.getValue().startsWith("//event:")){var s=r.getValue(),a=r.getName();e.attach(t,a,s,n)}return!0},this)}}addToElementIdMap(t){if(null!==t&&void 0!==t&&t instanceof BaseElement){var e=null;t.containsAttribute("id")&&(e=t.getAttributeValue("id"),t.setAttributeValue("id",this.uniqueIdRegistry.idAttributeWithSuffix(e))),null!==e&&this.elementMap.set(e,t)}}}const LOG$b=new coreutil_v1.Logger("ComponentFactory");class ComponentFactory{constructor(){this.eventRegistry=mindi_v1.InjectionPoint.instance(EventRegistry),this.stylesRegistry=mindi_v1.InjectionPoint.instance(StylesRegistry),this.templateRegistry=mindi_v1.InjectionPoint.instance(TemplateRegistry),this.uniqueIdRegistry=mindi_v1.InjectionPoint.instance(UniqueIdRegistry)}create(t){var e=this.templateRegistry.get(t);if(!e)throw LOG$b.error(this.templateRegistry),"No template was found with name "+t;var n=new ElementRegistrator(this.eventRegistry,this.uniqueIdRegistry,componentCounter++);return new xmlparser_v1.DomTree(e.getTemplateSource(),n).load(),this.mountStyles(t),new Component(n.getComponentIndex(),n.getRootElement(),n.getElementMap())}mountStyles(t){this.stylesRegistry.contains(t)&&CanvasStyles.setStyle(t,this.stylesRegistry.get(t))}}var componentCounter=0;const LOG$c=new coreutil_v1.Logger("InputElementDataBinding");class InputElementDataBinding{constructor(t,e){this.model=t,this.validator=e,this.pullers=new coreutil_v1.List,this.pushers=new coreutil_v1.List}static link(t,e){return new InputElementDataBinding(t,e)}and(t){return this.to(t)}to(t){const e=()=>{let e=coreutil_v1.PropertyAccessor.getValue(this.model,t.getName());t.getValue&&e!==t.getValue()&&coreutil_v1.PropertyAccessor.setValue(this.model,t.getName(),t.getValue());this.validator&&this.validator.validate&&this.validator.validate(t.getValue())};t.attachEvent("onchange",e),t.attachEvent("onkeyup",e),e.call();const n=()=>{var e=coreutil_v1.PropertyAccessor.getValue(this.model,t.getName());e===t.getValue()?t.setChecked&&!t.getChecked()&&t.setChecked(!0):t.setChecked&&t.getChecked()?t.setChecked(!1):t.setValue&&t.setValue(e)};let i="__changed_"+t.getName().replace(".","_");return this.model[i]||(this.model[i]=(()=>{this.push()})),this.pullers.add(e),this.pushers.add(n),this}pull(){this.pullers.forEach((t,e)=>{t.call(e);return!0},this)}push(){this.pushers.forEach((t,e)=>{t.call(e);return!0},this)}}class ProxyObjectFactory{static createProxyObject(t){return new Proxy(t,{set:(t,e,n)=>{let i=t[e]=n;let r="__changed_"+e;let o=t[r];if(o&&"function"==typeof o){let e=o.bind(t);e()}return i===n}})}}class History{static pushUrl(t,e,n){window.history.pushState(n,e,t.toString())}static getUrl(){return new Url(window.location.href)}static loadUrl(t){window.location=t.toString()}}class State{constructor(){this.stateListenerMap=new coreutil_v1.Map}recordState(t){var e=History.getUrl();e.getPath(0)!==t&&this.setUrl(e)}setUrl(t){History.pushUrl(t,"",{})}}const LOG$d=new coreutil_v1.Logger("JustrightConfig");class JustrightConfig{static getInstance(){return justrightConfig}constructor(){this.config=(new mindi_v1.MindiConfig).addTypeConfig(mindi_v1.SingletonConfig.unnamed(TemplateRegistry)).addTypeConfig(mindi_v1.SingletonConfig.unnamed(StylesRegistry)).addTypeConfig(mindi_v1.SingletonConfig.unnamed(EventRegistry)).addTypeConfig(mindi_v1.SingletonConfig.unnamed(UniqueIdRegistry)).addTypeConfig(mindi_v1.SingletonConfig.unnamed(ComponentFactory)).addTypeConfig(mindi_v1.SingletonConfig.unnamed(State))}getConfig(){return this.config}}const justrightConfig=new JustrightConfig;class ApplicationStorage{static setLocalAttribute(t,e){ContainerBridge.setLocalAttribute(t,e)}static getLocalAttribute(t){return ContainerBridge.getLocalAttribute(t)}static hasLocalAttribute(t){return ContainerBridge.hasLocalAttribute(t)}static removeLocalAttribute(t){return ContainerBridge.removeLocalAttribute(t)}}class SessionStorage{static setSessionAttribute(t,e){ContainerBridge.setSessionAttribute(t,e)}static hasSessionAttribute(t){return ContainerBridge.hasSessionAttribute(t)}static getSessionAttribute(t){return ContainerBridge.getSessionAttribute(t)}static removeSessionAttribute(t){return ContainerBridge.removeSessionAttribute(t)}}class HttpResponseHandler{constructor(t,e,n){this.code=t,this.objectFunction=e,this.mapperFunction=n}getCode(){return this.code}getObjectFunction(){return this.objectFunction}getMapperFunction(){return this.mapperFunction}}const LOG$e=new coreutil_v1.Logger("HttpCallBuilder");class HttpCallBuilder{constructor(t,e){this.url=t,this.paramter=e,this.httpCallbackMap=new coreutil_v1.Map,this.errorCallback=null}static newInstance(t,e,n){return new HttpCallBuilder(t,e,n)}responseMapping(t,e,n,i){return this.httpCallbackMap.set(t,new HttpResponseHandler(t,new coreutil_v1.ObjectFunction(e,n),i)),this}errorMapping(t,e){return t&&e&&(this.errorCallback=new coreutil_v1.ObjectFunction(t,e)),this}get(){Client.get(this.url).then(t=>{this.processResponse(t)},t=>{this.processError(t)})}post(){Client.post(this.url,this.paramter).then(t=>{this.processResponse(t)},t=>{this.processError(t)})}put(){Client.put(this.url,this.paramter).then(t=>{this.processResponse(t)},t=>{this.processError(t)})}patch(){Client.patch(this.url,this.paramter).then(t=>{this.processResponse(t)},t=>{this.processError(t)})}delete(){Client.delete(this.url).then(t=>{this.processResponse(t)},t=>{this.processError(t)})}processError(t){LOG$e.error(t),this.errorCallback&&this.errorCallback.call(t)}processResponse(t){var e=this.httpCallbackMap.get(t.status);e&&t.json().then(t=>{var n=e.getMapperFunction();n?e.getObjectFunction().call(n(t)):e.getObjectFunction().call(t)},t=>{})}}const LOG$f=new coreutil_v1.Logger("AbstractValidator");class AbstractValidator{constructor(t=!1){this.validListenerList=new coreutil_v1.List,this.invalidListenerList=new coreutil_v1.List,this.currentlyValid=t}isValid(){return this.iscurrentlyValid}valid(){this.iscurrentlyValid=!0,this.validListenerList.forEach((t,e)=>{t.call();return!0},this)}invalid(){this.iscurrentlyValid=!1,this.invalidListenerList.forEach((t,e)=>{t.call();return!0},this)}withValidListener(t){return this.validListenerList.add(t),this}withInvalidListener(t){return this.invalidListenerList.add(t),this}}class AndValidatorSet extends AbstractValidator{constructor(t=!1){super(t),this.validatorList=new coreutil_v1.List}withValidator(t){return t.withValidListener(new coreutil_v1.ObjectFunction(this,this.oneValid)),t.withInvalidListener(new coreutil_v1.ObjectFunction(this,this.oneInvalid)),this.validatorList.add(t),this}oneValid(){let t=!1;this.validatorList.forEach((e,n)=>{if(!e.isValid())return t=!0,!1;return!0},this),t?super.invalid():super.valid()}oneInvalid(){super.invalid()}}class RegexValidator extends AbstractValidator{constructor(t=!1,e="(.*)"){super(t),this.regex=e}validate(t){t&&"string"==typeof t&&t.match(this.regex)?this.valid():this.invalid()}}const EMAIL_FORMAT=/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;class EmailValidator extends RegexValidator{constructor(t=!1){super(t,EMAIL_FORMAT)}}class EqualsValidator extends AbstractValidator{constructor(t=!1,e=null){super(t),this.value=e}setValue(t){this.value=t}validate(t){t&&t===this.value?this.valid():this.invalid()}}class OrValidatorSet extends AbstractValidator{constructor(t=!1){super(t),this.validatorList=new coreutil_v1.List}withValidator(t){return t.withValidListener(new coreutil_v1.ObjectFunction(this,this.oneValid)),t.withInvalidListener(new coreutil_v1.ObjectFunction(this,this.oneInvalid)),this.validatorList.add(t),this}oneValid(){super.valid()}oneInvalid(){let t=!1;this.validatorList.forEach((e,n)=>{if(e.isValid())return t=!0,!1;return!0},this),t?super.valid():super.invalid()}}const PASSWORD_FORMAT=/^(?=.*[A-Za-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;class PasswordValidator extends RegexValidator{constructor(t=!1){super(t,PASSWORD_FORMAT)}}class RequiredValidator extends AbstractValidator{validate(t){""===t?this.invalid():this.valid()}}exports.AbstractInputElement=AbstractInputElement,exports.AbstractValidator=AbstractValidator,exports.AndValidatorSet=AndValidatorSet,exports.ApplicationStorage=ApplicationStorage,exports.Attribute=Attribute,exports.BaseElement=BaseElement,exports.CanvasRoot=CanvasRoot,exports.CanvasStyles=CanvasStyles,exports.CheckboxInputElement=CheckboxInputElement,exports.Client=Client,exports.Component=Component,exports.ComponentConfigProcessor=ComponentConfigProcessor,exports.ComponentCreatorInstanceProcessor=ComponentCreatorInstanceProcessor,exports.ComponentFactory=ComponentFactory,exports.ContainerBridge=ContainerBridge,exports.ElementMapper=ElementMapper,exports.ElementRegistrator=ElementRegistrator,exports.EmailValidator=EmailValidator,exports.EqualsValidator=EqualsValidator,exports.Event=Event,exports.EventRegistry=EventRegistry,exports.HTML=HTML,exports.History=History,exports.HttpCallBuilder=HttpCallBuilder,exports.HttpResponseHandler=HttpResponseHandler,exports.InputElementDataBinding=InputElementDataBinding,exports.JustrightConfig=JustrightConfig,exports.OrValidatorSet=OrValidatorSet,exports.PasswordValidator=PasswordValidator,exports.ProxyObjectFactory=ProxyObjectFactory,exports.RadioInputElement=RadioInputElement,exports.RegexValidator=RegexValidator,exports.RequiredValidator=RequiredValidator,exports.SessionStorage=SessionStorage,exports.SimpleElement=SimpleElement,exports.State=State,exports.Styles=Styles,exports.StylesLoader=StylesLoader,exports.StylesRegistry=StylesRegistry,exports.Template=Template,exports.TemplateRegistry=TemplateRegistry,exports.TemplatesLoader=TemplatesLoader,exports.TextInputElement=TextInputElement,exports.TextareaInputElement=TextareaInputElement,exports.TextnodeElement=TextnodeElement,exports.UniqueIdRegistry=UniqueIdRegistry,exports.Url=Url;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
